from aiogram import md
from aiogram import types
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher.storage import FSMContext

from filters import IsPrivate
from handlers.channels.strings import text_channel
from keyboards.inline.channel_keyboards import quit_keyboard, user_menu
from loader import dp, db
from states import Post
from utils.utils import check_link_for_channel, replace_symbols


@dp.message_handler(IsPrivate(),  Command('create_post'))
async def create_post(message: types.Message):

    text = f"‚ö† –ü—Ä–∞–≤–∏–ª–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –≤ –∫–∞–Ω–∞–ª–µ ‚ö†\n\n" \
           f"<b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è</b>\n" \
           f" - –§–æ—Ç–æ –∫–Ω–∏–≥–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –≤–µ—Å–∏—Ç—å –±–æ–ª–µ–µ 5 –º–µ—Ç—Ä–æ–≤\n" \
           f" - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤:\n" \
           f"       - –§–ò–û –∞–≤—Ç–æ—Ä–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ - 255 —Å–∏–º–≤–æ–ª–æ–≤\n" \
           f"       - –û–ø–∏—Å–∞–Ω–∏–µ - 2000 —Å–∏–º–≤–æ–ª–æ–≤\n" \
           f"–°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <pre>/b_00000</pre>\n" \
           f"‚Äº –ö–Ω–∏–≥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ –±–æ—Ç–∞\n\n\n" \
           f"–ò—Ç–∞–∫, –Ω–∞—á–Ω–µ–º‚ùï\n" \
           f"<b>–ü—Ä–∏—à–ª–∏ –º–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–Ω–∏–≥–∏</b>\n\n"


    await message.answer(text, reply_markup=quit_keyboard)
    await Post.Image.set()


@dp.message_handler(state=Post.Book)
async def get_post_book(message: types.Message, state: FSMContext):

    await state.update_data(book=replace_symbols(message.text[:254]))
    await message.answer('‚úÖ –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –º–Ω–µ –§–ò–û –∞–≤—Ç–æ—Ä–∞\n'
                         '<i>–ï—Å–ª–∏ –∞–≤—Ç–æ—Ä–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—á–∏—Å–ª–∏ –∏—Ö –§–ò–û —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é</i>', reply_markup=quit_keyboard)
    await Post.Author.set()


@dp.message_handler(state=Post.Author)
async def get_post_author(message: types.Message, state: FSMContext):

    await state.update_data(author=replace_symbols(message.text[:254]))
    await message.answer('‚úÖ –ï—Å—Ç—å! –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–∏–≥–∏', reply_markup=quit_keyboard)
    await Post.Description.set()



@dp.message_handler(state=Post.Description)
async def get_post_description(message: types.Message, state: FSMContext):

    url = md.hide_link("https://telegra.ph//file/93909ec4609d4bbc71f41.jpg")
    text = f'‚úÖ –ï—Å—Ç—å! –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–Ω–∏–≥—É\n' \
           f'–ö–∞–∫ –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–Ω–∏–≥—Éüëá {url}'

    await state.update_data(description=replace_symbols(message.text[:2000]))
    await message.answer(text, reply_markup=quit_keyboard)
    await Post.Link.set()



@dp.message_handler(state=Post.Link)
async def get_post_link(message: types.Message, state: FSMContext):
    '''
    –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–µ–π—Ç –∏ –≤—ã–≤–æ–¥–∏–º —é–∑–µ—Ä—É –ø–æ—Å—Ç –≤ –≥–æ—Ç–æ–≤–æ–º –≤–∏–¥–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    '''
    link = await check_link_for_channel(message.text, message)
    if not link:  return await Post.Link.set()

    await state.update_data(link=message.text)
    data = await state.get_data()

    dct = {
        'user_id': message.from_user.id, 'url': data['url'], 'book': data['book'], 'author': data['author'],
        'link': message.text, 'description': data['description']
    }
    post_id = await db.create_post(dct)
    await state.finish()

    text = text_channel(data)
    await message.answer(text, reply_markup=user_menu(post_id=post_id, user_id=message.from_user.id))


