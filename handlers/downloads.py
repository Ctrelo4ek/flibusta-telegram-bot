from io import BytesIO

from aiogram import types
from aiogram.types import InputFile
from aiogram.utils.exceptions import NetworkError, InvalidQueryID

from keyboards.inline.formats import files_call
from loader import dp, db
from utils.parsing.books import description
from utils.parsing.general import get, get_tempfile


@dp.callback_query_handler(files_call.filter())
async def download_book(call: types.CallbackQuery, callback_data: dict):
    format_file = callback_data['format_file']
    format_file_for_share = 'download' if format_file not in ['fb2', 'epub', 'mobi'] else format_file
    link = callback_data["link"]

    url = f'http://flibusta.is{link}/{format_file_for_share}'
    url_to_descr = f'http://flibusta.is{link}'
    soup = await get(url_to_descr)
    descr, author, book = description(soup)  # –æ–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–∏–≥–∏

    wait = await call.message.answer(f'–û–∂–∏–¥–∞–π—Ç–µ, –Ω–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞—Ç—å –∫–Ω–∏–≥—É üôÉ {url}')

    response = await get_tempfile(url)
    res_to_bytesio = BytesIO(response.read())  # –∫–æ–Ω–≤–µ–Ω—Ç–∏—Ä—É–µ–º –∫–Ω–∏–≥—É –≤ –±–∞–π—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    file = InputFile(path_or_bytesio=res_to_bytesio, filename=f'{book}.{format_file}')

    try:
        await call.message.answer_document(file, caption=author)
    except NetworkError:  # –õ–æ–≤–∏–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–æ–≤ –≤–µ—Å–æ–º –±–æ–ª—å—à–µ 50 –º–µ—Ç—Ä–æ–≤
        await wait.edit_text(f'–ù–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ªüòî\n'
                             f'–ü–æ–ø—Ä–æ–±—É–π —Å–∫–∞—á–∞—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ:\n'
                             f'{url}')
    try:
        await call.answer(cache_time=60)
    except InvalidQueryID:  # –õ–æ–≤–∏–º –æ—à–∏–±–∫—É –Ω–∞ –¥–ª–∏—Ç–µ–ª—å–Ω—É—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ/–æ—Ç–ø—Ä–∞–≤–∫—É
        pass

    await db.rating_book(book=book, link=link)  # –¥–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥)
    response.close()
