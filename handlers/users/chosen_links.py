import re

from aiogram import types

from keyboards.inline.other_keyboards import get_language, get_formats
from loader import dp, db
from utils.utils import check_link
from utils.parsing.authors import languages
from utils.parsing.books import parsing_formats, description
from utils.parsing.general import get, get_without_register
from utils.throttlig import rate_limit


@rate_limit(limit=3)
@dp.message_handler(regexp=re.compile(r'(^/a_\d+)|(^/a_\d+@)'))
async def chosen_link_author(message: types.Message):
    # –õ–æ–≤–∏–º –ª–∏–Ω–∫ –∏ –≤—ã–≤–æ–¥–∏–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–Ω–∞—Ç—ã —è–∑—ã–∫–æ–≤ –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞–ø–∏—Å–∞–Ω—ã –∫–Ω–∏–≥–∏
    link = check_link(message.text)
    url = f'http://flibusta.is{link}&lang='

    if message.chat.type == 'private':
        soup = await get_without_register(url)
    else:
        soup = await get(url)

    abbr_lst, languages_lst, author = languages(soup)
    text = f'–ö–Ω–∏–≥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏—Ö —è–∑—ã–∫–∞—Ö: \n' \
           f'–¢—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å —É–¥–æ–±–Ω—ã–π –¥–ª—è —Ç–µ–±—è —è–∑—ã–∫ üëá'

    await message.answer(text, reply_markup=get_language(
        languages_lst=languages_lst, link=link, abbr_lst=abbr_lst))
    await db.rating_author(author=author, link=link)  # –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞ –≤ –±–∞–∑—É –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞


@rate_limit(limit=2)
@dp.message_handler(regexp=re.compile(r'(^/b_\d+)|(^/b_\d+@.+)'))
async def chosen_link_book(message: types.Message):
    # –õ–æ–≤–∏–º –ª–∏–Ω–∫ –∏ –≤—ã–≤–æ–¥–∏–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    link = check_link(message.text)  # –æ–±—Ä–µ–∑–∞–µ–º –ª–∏—à–Ω–µ–µ –≤ —Å—Å—ã–ª–∫–µ

    book, author, file_formats, descr = await get_book_description(link)
    description = descr[:3*1000].replace('<', '(').replace('>', ')') # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –¥–ª–∏–Ω–Ω—É —Ç–µ–∫—Å—Ç–∞ –∏ —É–±—Ä–∞–Ω—ã —Å–∫–æ–±–∫–∏, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞–ª –±–æ—Ç –ø—Ä–∏ –≤—ã–≤–æ–¥–µ
    text = f'–ê–≤—Ç–æ—Ä: <b>{author}</b>\n\n' \
           f'üìñ <b>{book}</b>\n\n' \
           f'–û–ø–∏—Å–∞–Ω–∏–µ: \n' \
           f'<i>{description}</i>'

    await message.answer(text=text, reply_markup=get_formats(formats_lst=file_formats, link=link))


async def get_book_description(link):

    url = f'http://flibusta.is{link}'
    data = await db.select_book(link=link)

    if data and data.get('description'):

        descr = data.get('description')
        author = data.get('author')
        book = data.get('book_name')
        formats_list = data.get('formats').split(':')
    else:
        soup = await get(url)
        formats_list = parsing_formats(soup)

        descr, author, book = description(soup)
        formats = ':'.join(formats_list)
        await db.insert_book(book=book, link=link, author=author, formats=formats, description=descr)

    return book, author, formats_list, descr